<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Golang中的GC垃圾回收机制</title>
    <url>/2021/08/15/Golang%E4%B8%AD%E7%9A%84GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h1 id="Golang中的GC垃圾回收机制"><a href="#Golang中的GC垃圾回收机制" class="headerlink" title="Golang中的GC垃圾回收机制"></a>Golang中的GC垃圾回收机制</h1><h2 id="Go-1-3-标记清除-mark-and-sweep"><a href="#Go-1-3-标记清除-mark-and-sweep" class="headerlink" title="Go 1.3 标记清除(mark and sweep)"></a>Go 1.3 标记清除(mark and sweep)</h2><blockquote>
<p>流程：</p>
<ol>
<li>暂停程序业务逻辑, 找出不不可达的对象，和可达对象。</li>
<li>开始标记，程序找出它所有可达的对象，并做上标记。</li>
<li>标记完了了之后，然后开始清除未标记的对象.</li>
<li>停⽌止暂停，让程序继续跑。然后循环重复这个过程，直到process程序⽣生命周期结束。</li>
</ol>
<p>缺点：</p>
<ol>
<li>STW，stop the world；让程序暂停，程序出现卡顿 (重要问题)。将第四步和第三步换位置， 缩短STW的范围</li>
<li>标记需要扫描整个heap</li>
<li>清除数据会产⽣生heap碎⽚。</li>
</ol>
</blockquote>
<h2 id="Go-1-5-三色标记法"><a href="#Go-1-5-三色标记法" class="headerlink" title="Go 1.5 三色标记法"></a>Go 1.5 三色标记法</h2><p>流程：</p>
<ol>
<li>只要是新创建的对象,默认的颜⾊色都是标记为“⽩白⾊色”.</li>
</ol>
<img src="/2021/08/15/Golang%E4%B8%AD%E7%9A%84GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/image-20210815202056508.png" alt="image-20210815202056508" style="zoom:40%;">

<ol start="2">
<li><p>每次GC回收开始, 然后从根节点开始遍历所有对象，把遍历到的对象从白色集合放入“灰色”集合。</p>
<img src="/2021/08/15/Golang%E4%B8%AD%E7%9A%84GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/image-20210815202153446.png" alt="image-20210815202153446" style="zoom:40%;"></li>
<li><p>遍历灰色集合，将灰色对象引用的对象从白色集合放入灰色集合，之后将此灰色对象放入黑色集合。</p>
</li>
</ol>
<img src="/2021/08/15/Golang%E4%B8%AD%E7%9A%84GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/image-20210815202305099.png" alt="image-20210815202305099" style="zoom:40%;">

<ol start="4">
<li><p>重复第三步, 直到灰⾊色中⽆无任何对象.</p>
<center><img src="/2021/08/15/Golang%E4%B8%AD%E7%9A%84GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/image-20210815202348203.png" alt="image-20210815202348203" style="zoom:30%;"><img src="/2021/08/15/Golang%E4%B8%AD%E7%9A%84GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/image-20210815202439107.png" alt="image-20210815202439107" style="zoom:30%;"></center></li>
<li><p>回收所有的白色标记表的对象. 也就是回收垃圾.</p>
</li>
</ol>
<img src="/2021/08/15/Golang%E4%B8%AD%E7%9A%84GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/image-20210815202557320.png" alt="image-20210815202557320" style="zoom:40%;">

<h2 id="如果三色标记法不被STW保护"><a href="#如果三色标记法不被STW保护" class="headerlink" title="如果三色标记法不被STW保护"></a>如果三色标记法不被STW保护</h2><p><em>条件1: ⼀一个白色对象被⿊黑色对象引用(白色被挂在黑色下).</em></p>
<p><em>条件2: 灰色对象与它之间的可达关系的白色对象遭到破坏(灰色同时丢了该白色)</em></p>
<p><em>两个条件同时满⾜足，那么就会出现对象丢失的现象</em></p>
<p>样例：</p>
<p>如果不开启STW：</p>
<center><img src="/2021/08/15/Golang%E4%B8%AD%E7%9A%84GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/image-20210815203317889.png" alt="image-20210815203317889" style="zoom:25%;"><img src="/2021/08/15/Golang%E4%B8%AD%E7%9A%84GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/image-20210815203356122.png" alt="image-20210815203356122" style="zoom:25%;"><img src="/2021/08/15/Golang%E4%B8%AD%E7%9A%84GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/image-20210815203423861.png" alt="image-20210815203423861" style="zoom:25%;"></center>



<h2 id="强弱三色不变式"><a href="#强弱三色不变式" class="headerlink" title="强弱三色不变式"></a>强弱三色不变式</h2><h3 id="强三⾊色不不变式"><a href="#强三⾊色不不变式" class="headerlink" title="强三⾊色不不变式"></a>强三⾊色不不变式</h3><p>破坏条件1</p>
<img src="/2021/08/15/Golang%E4%B8%AD%E7%9A%84GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/image-20210815213638805.png" alt="image-20210815213638805" style="zoom:33%;">

<h3 id="弱三⾊色不不变式"><a href="#弱三⾊色不不变式" class="headerlink" title="弱三⾊色不不变式"></a>弱三⾊色不不变式</h3><p>破坏条件2</p>
<img src="/2021/08/15/Golang%E4%B8%AD%E7%9A%84GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/image-20210815213703432.png" alt="image-20210815213703432" style="zoom:40%;">

<p>如果三色标记满足强弱不变式之一，即可保证不丢失对象.</p>
<h2 id="屏障机制"><a href="#屏障机制" class="headerlink" title="屏障机制"></a>屏障机制</h2><p>屏障？程序运行过程中额外添加的判断机制。</p>
<img src="/2021/08/15/Golang%E4%B8%AD%E7%9A%84GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/image-20210815213927896.png" alt="image-20210815213927896" style="zoom:50%;">

<h3 id="插入屏障"><a href="#插入屏障" class="headerlink" title="插入屏障"></a>插入屏障</h3><p>插入屏障： 对象被引用时，触发的机制。</p>
<p>具体操作： 在A对象引用B对象的时候，B对象被标记为灰色。(将B挂在A下游，B必须被标记为灰色)</p>
<p>满足: 强三色不不变式. (不存在黑色对象引用白色对象的情况了， 因为白色会强制变成灰色)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//伪码</span><br><span class="line">添加下游对象(当前下游对象slot, 新下游对象ptr) &#123;</span><br><span class="line">	//1</span><br><span class="line">	标记灰⾊色(新下游对象ptr)</span><br><span class="line">	//2</span><br><span class="line">	当前下游对象slot = 新下游对象ptr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>场景：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">A.添加下游对象(B, nil)  //A对象，删除B对象的引⽤用。 B被A删除，被标记为灰(如果B之前为⽩)</span><br><span class="line">A.添加下游对象(B, C) //A对象，更更换下游B变成C。 B被A删除，被标记为灰(如果B之前为⽩)</span><br></pre></td></tr></table></figure>

<p>样例：</p>
<img src="/2021/08/15/Golang%E4%B8%AD%E7%9A%84GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/image-20210815214828157.png" alt="image-20210815214828157" style="zoom:50%;">

<p>插入写屏障只在堆上触发，在栈上不触发。</p>
<img src="/2021/08/15/Golang%E4%B8%AD%E7%9A%84GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/image-20210815214950520.png" alt="image-20210815214950520" style="zoom:26%;">

<img src="/2021/08/15/Golang%E4%B8%AD%E7%9A%84GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/image-20210815215043176.png" alt="image-20210815215043176" style="zoom:30%;">

<img src="/2021/08/15/Golang%E4%B8%AD%E7%9A%84GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/image-20210815215126841.png" alt="image-20210815215126841" style="zoom:33%;">

<img src="/2021/08/15/Golang%E4%B8%AD%E7%9A%84GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/image-20210815215308921.png" alt="image-20210815215308921" style="zoom:33%;">

<p>由于栈上不触发插入写屏障，所以在准备回收白色前，需要加STW暂停保护重新扫描一遍栈空间。</p>
<img src="/2021/08/15/Golang%E4%B8%AD%E7%9A%84GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/image-20210815215334937.png" alt="image-20210815215334937" style="zoom:33%;">

<p>不足：结束时需要STW来重新扫描栈，⼤大约需要10~100ms</p>
<h3 id="删除屏障"><a href="#删除屏障" class="headerlink" title="删除屏障"></a>删除屏障</h3><p>删除屏障：对象被删除时 触发的机制。</p>
<p>具体操作: 被删除的对象，如果自身为灰色或者白色，那么被标记为灰色。</p>
<p>满足: 弱三色不变式. (保护灰色对象到白色对象的路径不会断)。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//伪码</span><br><span class="line">添加下游对象(当前下游对象slot， 新下游对象ptr) &#123;</span><br><span class="line">	//1</span><br><span class="line">	<span class="keyword">if</span> (当前下游对象slot是灰⾊色 || 当前下游对象slot是⽩白⾊色) &#123;</span><br><span class="line">		标记灰⾊色(当前下游对象slot) //slot为被删除对象， 标记为灰⾊色</span><br><span class="line">	&#125;</span><br><span class="line">	//2</span><br><span class="line">	当前下游对象slot = 新下游对象ptr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>场景：</p>
<p>​    A.添加下游对象(B, nil) //A对象，删除B对象的引⽤用。 B被A删除，被标记为灰(如果B之前为⽩白)<br>​    A.添加下游对象(B, C) //A对象，更更换下游B变成C。 B被A删除，被标记为灰(如果B之前为⽩白)</p>
<p>样例：</p>
<img src="/2021/08/15/Golang%E4%B8%AD%E7%9A%84GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/image-20210815220252392.png" alt="image-20210815220252392" style="zoom:30%;">

<img src="/2021/08/15/Golang%E4%B8%AD%E7%9A%84GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/image-20210815220332343.png" alt="image-20210815220332343" style="zoom:33%;">

<img src="/2021/08/15/Golang%E4%B8%AD%E7%9A%84GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/image-20210815220413361.png" alt="image-20210815220413361" style="zoom:40%;">

<img src="/2021/08/15/Golang%E4%B8%AD%E7%9A%84GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/image-20210815220435567.png" alt="image-20210815220435567" style="zoom:50%;">

<img src="/2021/08/15/Golang%E4%B8%AD%E7%9A%84GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/image-20210815220500445.png" alt="image-20210815220500445" style="zoom:40%;">

<img src="/2021/08/15/Golang%E4%B8%AD%E7%9A%84GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/image-20210815220533566.png" alt="image-20210815220533566" style="zoom:30%;">

<img src="/2021/08/15/Golang%E4%B8%AD%E7%9A%84GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/image-20210815220552303.png" alt="image-20210815220552303" style="zoom:40%;">

<p>不足： 回收精度低，一个对象即使被删除了最后一个指向它的指针也依旧可以活过这一轮，在下一轮GC中被清理理掉。</p>
<h2 id="Go-1-8-混合写屏障机制"><a href="#Go-1-8-混合写屏障机制" class="headerlink" title="Go 1.8 混合写屏障机制"></a>Go 1.8 混合写屏障机制</h2><blockquote>
<p>具体操作:</p>
<ol>
<li>GC开始将栈上的对象全部扫描并标记为黑色(之后不再进行第二次重复扫描，无需STW)</li>
<li>GC期间，任何在栈上创建的新对象，均为黑色。</li>
<li>被删除的对象标记为灰色。</li>
<li>被添加的对象标记为灰色。</li>
</ol>
<p>满足: 变形的弱三色不变式. (结合了插入、删除写屏障两者的优点)</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//伪码</span><br><span class="line">添加下游对象(当前下游对象slot, 新下游对象ptr) &#123;</span><br><span class="line">    //1</span><br><span class="line">    标记灰⾊色(当前下游对象slot) //只要当前下游对象被移⾛走，就标记灰⾊色</span><br><span class="line">    //2</span><br><span class="line">    标记灰⾊色(新下游对象ptr)</span><br><span class="line">    //3</span><br><span class="line">    当前下游对象slot = 新下游对象ptr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2021/08/15/Golang%E4%B8%AD%E7%9A%84GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/image-20210815221417608.png" alt="image-20210815221417608" style="zoom:25%;">

<img src="/2021/08/15/Golang%E4%B8%AD%E7%9A%84GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/image-20210815221437818.png" alt="image-20210815221437818" style="zoom:50%;">

<h3 id="场景一"><a href="#场景一" class="headerlink" title="场景一"></a>场景一</h3><p>对象被一个堆对象删除引用，成为栈对象的下游。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//伪码</span><br><span class="line">//前提：堆对象4-&gt;对象7 = 对象7； //对象7 被 对象4引⽤用</span><br><span class="line">栈对象1-&gt;对象7 = 堆对象7； //将堆对象7 挂在 栈对象1 下游</span><br><span class="line">堆对象4-&gt;对象7 = null； //对象4 删除引⽤用 对象7</span><br></pre></td></tr></table></figure>

<img src="/2021/08/15/Golang%E4%B8%AD%E7%9A%84GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/image-20210815222017066.png" alt="image-20210815222017066" style="zoom:33%;">

<img src="/2021/08/15/Golang%E4%B8%AD%E7%9A%84GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/image-20210815222032431.png" alt="image-20210815222032431" style="zoom:33%;">

<h3 id="场景二"><a href="#场景二" class="headerlink" title="场景二"></a>场景二</h3><p>对象被一个栈对象删除引用，成为另一个栈对象的下游。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new 栈对象9；</span><br><span class="line">对象9-&gt;对象3 = 对象3； //将栈对象3 挂在 栈对象9 下游</span><br><span class="line">对象2-&gt;对象3 = null； //对象2 删除引⽤用 对象3</span><br></pre></td></tr></table></figure>

<img src="/2021/08/15/Golang%E4%B8%AD%E7%9A%84GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/image-20210815222315895-1629105238588.png" alt="image-20210815222315895" style="zoom:50%;">

<img src="/2021/08/15/Golang%E4%B8%AD%E7%9A%84GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/image-20210815222346906-1629105238588.png" alt="image-20210815222346906" style="zoom:50%;">

<img src="/2021/08/15/Golang%E4%B8%AD%E7%9A%84GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/image-20210815222407645-1629105238589.png" alt="image-20210815222407645" style="zoom:50%;">

<h3 id="场景三"><a href="#场景三" class="headerlink" title="场景三"></a>场景三</h3><p>对象被一个堆对象删除引用，成为另一个堆对象的下游。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">堆对象10-&gt;对象7 = 堆对象7； //将堆对象7 挂在 堆对象10 下游</span><br><span class="line">堆对象4-&gt;对象7 = null； //对象4 删除引⽤用 对象7</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<img src="/2021/08/15/Golang%E4%B8%AD%E7%9A%84GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/image-20210815222602561-1629105297759.png" alt="image-20210815222602561" style="zoom:50%;">

<img src="/2021/08/15/Golang%E4%B8%AD%E7%9A%84GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/image-20210815222619017-1629105297759.png" alt="image-20210815222619017" style="zoom:50%;">

<img src="/2021/08/15/Golang%E4%B8%AD%E7%9A%84GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/image-20210815222633300-1629105297758.png" alt="image-20210815222633300" style="zoom:50%;">

<h3 id="场景四"><a href="#场景四" class="headerlink" title="场景四"></a>场景四</h3><p>对象从一个栈对象删除引用，成为另一个堆对象的下游。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">栈对象1-&gt;对象2 = null； //对象1 删除引⽤用 对象2</span><br><span class="line">堆对象4-&gt;对象7 = null; //对象4 删除引⽤用 对象7</span><br><span class="line">堆对象4-&gt;对象2 = 栈对象2； //对象4 添加 下游 栈对象2</span><br></pre></td></tr></table></figure>

<img src="/2021/08/15/Golang%E4%B8%AD%E7%9A%84GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/image-20210815222835930.png" alt="image-20210815222835930" style="zoom:50%;">

<img src="/2021/08/15/Golang%E4%B8%AD%E7%9A%84GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/image-20210815222852740.png" alt="image-20210815222852740" style="zoom:50%;">

<img src="/2021/08/15/Golang%E4%B8%AD%E7%9A%84GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/image-20210815222910678.png" alt="image-20210815222910678" style="zoom:50%;">

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Go V1.3 普通的标记清除法， 整体过程需要STW，效率极低</p>
<p>Go V1.5 三⾊色标记法， 堆空间启动写屏障，栈空间不启动， 全部扫描之后，需要重新扫描⼀一次栈(需要STW)， 效率普通</p>
<p>Go V1.8 三⾊色标记法，混合写屏障机制， 栈空间不不启动，堆空间启动， 整体过程⼏几乎不不需要STW， 效率较高</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
  </entry>
  <entry>
    <title>周易基础及其应用01</title>
    <url>/2021/08/15/%E5%91%A8%E6%98%93%E5%9F%BA%E7%A1%80%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A801/</url>
    <content><![CDATA[<h1 id="周易基础及应用"><a href="#周易基础及应用" class="headerlink" title="周易基础及应用"></a>周易基础及应用</h1><p>千古奇书《周易》</p>
<p>人更三圣：伏羲    周文王    孔夫子</p>
<p>事历三古：远古    中古         近古</p>
<p>《易经》它是以八卦为核心，以卦的形式来说明问题，以阴爻和阳爻来说明问题，以阴爻和阳爻的相互配合，以文字系统与符号系统相结合说明万事万物的根本规律。</p>
<p>《易经》为群经之首。</p>
<p>系词： <strong>夫《易》何为者也，开物成务斯如此也。</strong>  开物成务：开物是认识事物的本质，成务是怎么去解决这个问题。</p>
<p><strong>不善易者，不得为将相。</strong>   </p>
<p><strong>不知易不足以言大医。   ————孙思邈</strong></p>
<p>易道广大，无所不包。</p>
<p>《易》与天地准，故能弥纶天地之道。</p>
<p>百姓日用而不知。</p>
<img src="/2021/08/15/%E5%91%A8%E6%98%93%E5%9F%BA%E7%A1%80%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A801/image-20210815150334560.png" alt="image-20210815150334560" style="zoom:33%;">

<h2 id="阴阳学说"><a href="#阴阳学说" class="headerlink" title="阴阳学说"></a>阴阳学说</h2><p>易以道阴阳。 ——庄子</p>
<p>天地间无往而非阴阳，一动一静一语一默，皆是阴阳之理。 ———朱熹</p>
<p>阳：天    上    昼    男    君    贵    福 ….</p>
<p>阴：地    下    夜    女    臣    贱    祸 ….</p>
<p><strong>一阴一阳之谓道。</strong></p>
<p>主要内容：</p>
<ul>
<li>阴阳对立</li>
<li>阴阳依存（互根）。有无相生，难易相成，长短相盈，高低相形，音声相合，前后相随，恒也。</li>
<li>阴阳消长。阴阳动态变化，动态平衡。阴盛则阳病，阳盛则阴病。</li>
<li>阴阳转换。消长属于量变，转化属于质变。</li>
</ul>
<p>中国哲学三大问题：天人、群己、身心</p>
<p>重视对立，追求平衡。</p>
<h2 id="五行学说"><a href="#五行学说" class="headerlink" title="五行学说"></a>五行学说</h2><p>世界上的万事万物的运动和发生发展都是”金木水火土“这五种状态，相互作用、相互运动的结果。  ——&gt;系统观</p>
<h3 id="五行特点"><a href="#五行特点" class="headerlink" title="五行特点"></a>五行特点</h3><blockquote>
<p>五行顺序              特性        方位    五德            季节</p>
<p>一曰水    润下    润下寒冷    北方    智               冬季</p>
<p>二曰火    炎上    炎热向上    南方    礼               夏季</p>
<p>三曰木    曲直    生发条达    东方    仁               春季</p>
<p>四曰金    从草    清凉萧杀    西方    义                秋季</p>
<p>五曰土    稼穑    长养化育    中央    信      农历（三、六、九、十二月）</p>
</blockquote>
<h3 id="五行生克"><a href="#五行生克" class="headerlink" title="五行生克"></a>五行生克</h3><img src="/2021/08/15/%E5%91%A8%E6%98%93%E5%9F%BA%E7%A1%80%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A801/image-20210815160518695.png" alt="image-20210815160518695" style="zoom:33%;">

<h3 id="五行的旺、相、休、囚、死"><a href="#五行的旺、相、休、囚、死" class="headerlink" title="五行的旺、相、休、囚、死"></a>五行的旺、相、休、囚、死</h3><p>生克制化之理</p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">旺</th>
<th align="center">相</th>
<th align="center">死</th>
<th align="center">囚</th>
<th align="center">休</th>
</tr>
</thead>
<tbody><tr>
<td align="center">春</td>
<td align="center">木</td>
<td align="center">火</td>
<td align="center">土</td>
<td align="center">金</td>
<td align="center">水</td>
</tr>
<tr>
<td align="center">夏</td>
<td align="center">火</td>
<td align="center">土</td>
<td align="center">金</td>
<td align="center">水</td>
<td align="center">木</td>
</tr>
<tr>
<td align="center">秋</td>
<td align="center">金</td>
<td align="center">水</td>
<td align="center">木</td>
<td align="center">火</td>
<td align="center">土</td>
</tr>
<tr>
<td align="center">冬</td>
<td align="center">水</td>
<td align="center">木</td>
<td align="center">火</td>
<td align="center">土</td>
<td align="center">金</td>
</tr>
<tr>
<td align="center">四季</td>
<td align="center">土</td>
<td align="center">金</td>
<td align="center">水</td>
<td align="center">木</td>
<td align="center">火</td>
</tr>
</tbody></table>
<h2 id="天干地支"><a href="#天干地支" class="headerlink" title="天干地支"></a>天干地支</h2><h3 id="十天干"><a href="#十天干" class="headerlink" title="十天干"></a>十天干</h3><blockquote>
<p>甲        乙        丙        丁        戊        己        庚        辛        壬        癸</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center"></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="center">甲乙同属木</td>
<td>东方</td>
<td>甲阳木</td>
<td>乙阴木</td>
</tr>
<tr>
<td align="center">丙丁同属火</td>
<td>南方</td>
<td>丙阳火</td>
<td>丁阴火</td>
</tr>
<tr>
<td align="center">戊己同属土</td>
<td>中央</td>
<td>戊阳土</td>
<td>己阴土</td>
</tr>
<tr>
<td align="center">庚辛同属金</td>
<td>西方</td>
<td>庚阳金</td>
<td>辛阴金</td>
</tr>
<tr>
<td align="center">壬癸同属水</td>
<td>北方</td>
<td>壬阳水</td>
<td>癸阴水</td>
</tr>
</tbody></table>
<h4 id="天干相和"><a href="#天干相和" class="headerlink" title="天干相和"></a>天干相和</h4><blockquote>
<p>甲己合土</p>
<p>乙庚合金</p>
<p>丙辛合水</p>
<p>丁壬合木</p>
<p>戊癸合火</p>
</blockquote>
<h4 id="十天干的相生相克"><a href="#十天干的相生相克" class="headerlink" title="十天干的相生相克"></a>十天干的相生相克</h4><img src="/2021/08/15/%E5%91%A8%E6%98%93%E5%9F%BA%E7%A1%80%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A801/image-20210816165629369.png" alt="image-20210815160518695">

<img src="/2021/08/15/%E5%91%A8%E6%98%93%E5%9F%BA%E7%A1%80%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A801/image-20210816165743365.png" alt="image-20210815160518695">

<h3 id="地支"><a href="#地支" class="headerlink" title="地支"></a>地支</h3><p>P8</p>
]]></content>
      <categories>
        <category>哲学</category>
        <category>周易基础及其应用</category>
      </categories>
  </entry>
</search>
